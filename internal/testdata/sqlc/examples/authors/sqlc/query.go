// Code generated by github.com/MartyHub/sqlc-pg version dev
// DO NOT EDIT

package sqlc

import (
	"context"
	"github.com/jackc/pgx/v5"
)

type QueryRepository interface {
	CreateAuthor(ctx context.Context, params CreateAuthorParams) (GetAuthor, error)
	DeleteAuthor(ctx context.Context, id int) error
	GetAuthor(ctx context.Context, id int) (GetAuthor, error)
	ListAuthors(ctx context.Context) ([]GetAuthor, error)
}

type queryRepository struct {
	db Database
}

func NewQueryRepository(db Database) QueryRepository {
	return queryRepository{db: db}
}

const createAuthorStmt = `INSERT INTO authors (
          name, bio
) VALUES (
  $1, $2
)
RETURNING id, name, bio`

type CreateAuthorParams struct {
	Name string  `db:"name"`
	Bio  *string `db:"bio"`
}

func (repo queryRepository) CreateAuthor(ctx context.Context, params CreateAuthorParams) (GetAuthor, error) {
	rows, err := repo.db.Query(ctx, createAuthorStmt,
		params.Name,
		params.Bio,
	)
	if err != nil {
		var result GetAuthor

		return result, err
	}

	return CollectExactlyOneRow(rows, ScanGetAuthor)
}

const deleteAuthorStmt = `DELETE FROM authors
WHERE id = $1`

func (repo queryRepository) DeleteAuthor(ctx context.Context, id int) error {
	_, err := repo.db.Exec(ctx, deleteAuthorStmt, id)

	return err
}

const getAuthorStmt = `SELECT id, name, bio FROM authors
WHERE id = $1 LIMIT 1`

type GetAuthor struct {
	ID   int     `db:"id"`
	Name string  `db:"name"`
	Bio  *string `db:"bio"`
}

func ScanGetAuthor(row pgx.CollectableRow) (GetAuthor, error) {
	var result GetAuthor

	err := row.Scan(
		&result.ID,
		&result.Name,
		&result.Bio,
	)

	return result, err
}

func (repo queryRepository) GetAuthor(ctx context.Context, id int) (GetAuthor, error) {
	rows, err := repo.db.Query(ctx, getAuthorStmt, id)
	if err != nil {
		var result GetAuthor

		return result, err
	}

	return CollectExactlyOneRow(rows, ScanGetAuthor)
}

const listAuthorsStmt = `SELECT id, name, bio FROM authors
ORDER BY name`

func (repo queryRepository) ListAuthors(ctx context.Context) ([]GetAuthor, error) {
	rows, err := repo.db.Query(ctx, listAuthorsStmt)
	if err != nil {
		return nil, err
	}

	return pgx.CollectRows(rows, ScanGetAuthor)
}
