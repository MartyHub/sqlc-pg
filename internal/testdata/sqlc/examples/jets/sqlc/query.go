// Code generated by github.com/MartyHub/sqlc-pg version dev
// DO NOT EDIT

package sqlc

import (
	"context"
	"github.com/jackc/pgx/v5"
)

type QueryRepository interface {
	CountPilots(ctx context.Context) (int, error)
	DeletePilot(ctx context.Context, id int32) error
	ListPilots(ctx context.Context) ([]ListPilots, error)
}

type queryRepository struct {
	db Database
}

func NewQueryRepository(db Database) QueryRepository {
	return queryRepository{db: db}
}

const countPilotsStmt = `SELECT COUNT(*) FROM pilots`

func ScanCountPilots(row pgx.CollectableRow) (int, error) {
	var result int

	err := row.Scan(&result)

	return result, err
}

func (repo queryRepository) CountPilots(ctx context.Context) (int, error) {
	rows, err := repo.db.Query(ctx, countPilotsStmt)
	if err != nil {
		var result int

		return result, err
	}

	return CollectExactlyOneRow(rows, ScanCountPilots)
}

const deletePilotStmt = `DELETE FROM pilots WHERE id = $1`

func (repo queryRepository) DeletePilot(ctx context.Context, id int32) error {
	_, err := repo.db.Exec(ctx, deletePilotStmt, id)

	return err
}

const listPilotsStmt = `SELECT id, name FROM pilots LIMIT 5`

type ListPilots struct {
	ID   int32
	Name string
}

func ScanListPilots(row pgx.CollectableRow) (ListPilots, error) {
	var result ListPilots

	err := row.Scan(
		&result.ID,
		&result.Name,
	)

	return result, err
}

func (repo queryRepository) ListPilots(ctx context.Context) ([]ListPilots, error) {
	rows, err := repo.db.Query(ctx, listPilotsStmt)
	if err != nil {
		return nil, err
	}

	return pgx.CollectRows(rows, ScanListPilots)
}
