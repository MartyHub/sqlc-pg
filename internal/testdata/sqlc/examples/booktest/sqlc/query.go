// Code generated by github.com/MartyHub/sqlc-pg version dev
// DO NOT EDIT

package sqlc

import (
	"context"
	"github.com/jackc/pgx/v5"
	"time"
)

type QueryRepository interface {
	BooksByTags(ctx context.Context, params1 []string) ([]BooksByTags, error)
	BooksByTitleYear(ctx context.Context, params BooksByTitleYearParams) ([]GetBook, error)
	CreateAuthor(ctx context.Context, name string) (GetAuthor, error)
	CreateBook(ctx context.Context, params CreateBookParams) (GetBook, error)
	DeleteBook(ctx context.Context, bookID int32) error
	GetAuthor(ctx context.Context, authorID int32) (GetAuthor, error)
	GetBook(ctx context.Context, bookID int32) (GetBook, error)
	UpdateBook(ctx context.Context, params UpdateBookParams) error
	UpdateBookIsbn(ctx context.Context, params UpdateBookIsbnParams) error
}

type queryRepository struct {
	db Database
}

func NewQueryRepository(db Database) QueryRepository {
	return queryRepository{db: db}
}

const booksByTagsStmt = `SELECT 
  book_id,
  title,
  name,
  isbn,
  tags
FROM books
LEFT JOIN authors ON books.author_id = authors.author_id
WHERE tags && $1::varchar[]`

type BooksByTags struct {
	BookID int32    `db:"book_id"`
	Title  string   `db:"title"`
	Name   *string  `db:"name"`
	Isbn   string   `db:"isbn"`
	Tags   []string `db:"tags"`
}

func ScanBooksByTags(row pgx.CollectableRow) (BooksByTags, error) {
	var result BooksByTags

	err := row.Scan(
		&result.BookID,
		&result.Title,
		&result.Name,
		&result.Isbn,
		&result.Tags,
	)

	return result, err
}

func (repo queryRepository) BooksByTags(ctx context.Context, params1 []string) ([]BooksByTags, error) {
	rows, err := repo.db.Query(ctx, booksByTagsStmt, params1)
	if err != nil {
		return nil, err
	}

	return pgx.CollectRows(rows, ScanBooksByTags)
}

const booksByTitleYearStmt = `SELECT book_id, author_id, isbn, book_type, title, year, available, tags FROM books
WHERE title = $1 AND year = $2`

type BooksByTitleYearParams struct {
	Title string `db:"title"`
	Year  int32  `db:"year"`
}

func (repo queryRepository) BooksByTitleYear(ctx context.Context, params BooksByTitleYearParams) ([]GetBook, error) {
	rows, err := repo.db.Query(ctx, booksByTitleYearStmt,
		params.Title,
		params.Year,
	)
	if err != nil {
		return nil, err
	}

	return pgx.CollectRows(rows, ScanGetBook)
}

const createAuthorStmt = `INSERT INTO authors (name) VALUES ($1)
RETURNING author_id, name`

func (repo queryRepository) CreateAuthor(ctx context.Context, name string) (GetAuthor, error) {
	rows, err := repo.db.Query(ctx, createAuthorStmt, name)
	if err != nil {
		var result GetAuthor

		return result, err
	}

	return CollectExactlyOneRow(rows, ScanGetAuthor)
}

const createBookStmt = `INSERT INTO books (
    author_id,
    isbn,
    book_type,
    title,
    year,
    available,
    tags
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7
)
RETURNING book_id, author_id, isbn, book_type, title, year, available, tags`

type CreateBookParams struct {
	AuthorID  int32     `db:"author_id"`
	Isbn      string    `db:"isbn"`
	BookType  BookType  `db:"book_type"`
	Title     string    `db:"title"`
	Year      int32     `db:"year"`
	Available time.Time `db:"available"`
	Tags      []string  `db:"tags"`
}

func (repo queryRepository) CreateBook(ctx context.Context, params CreateBookParams) (GetBook, error) {
	rows, err := repo.db.Query(ctx, createBookStmt,
		params.AuthorID,
		params.Isbn,
		params.BookType,
		params.Title,
		params.Year,
		params.Available,
		params.Tags,
	)
	if err != nil {
		var result GetBook

		return result, err
	}

	return CollectExactlyOneRow(rows, ScanGetBook)
}

const deleteBookStmt = `DELETE FROM books
WHERE book_id = $1`

func (repo queryRepository) DeleteBook(ctx context.Context, bookID int32) error {
	_, err := repo.db.Exec(ctx, deleteBookStmt, bookID)

	return err
}

const getAuthorStmt = `SELECT author_id, name FROM authors
WHERE author_id = $1`

type GetAuthor struct {
	AuthorID int32  `db:"author_id"`
	Name     string `db:"name"`
}

func ScanGetAuthor(row pgx.CollectableRow) (GetAuthor, error) {
	var result GetAuthor

	err := row.Scan(
		&result.AuthorID,
		&result.Name,
	)

	return result, err
}

func (repo queryRepository) GetAuthor(ctx context.Context, authorID int32) (GetAuthor, error) {
	rows, err := repo.db.Query(ctx, getAuthorStmt, authorID)
	if err != nil {
		var result GetAuthor

		return result, err
	}

	return CollectExactlyOneRow(rows, ScanGetAuthor)
}

const getBookStmt = `SELECT book_id, author_id, isbn, book_type, title, year, available, tags FROM books
WHERE book_id = $1`

type GetBook struct {
	BookID    int32     `db:"book_id"`
	AuthorID  int32     `db:"author_id"`
	Isbn      string    `db:"isbn"`
	BookType  BookType  `db:"book_type"`
	Title     string    `db:"title"`
	Year      int32     `db:"year"`
	Available time.Time `db:"available"`
	Tags      []string  `db:"tags"`
}

func ScanGetBook(row pgx.CollectableRow) (GetBook, error) {
	var result GetBook

	err := row.Scan(
		&result.BookID,
		&result.AuthorID,
		&result.Isbn,
		&result.BookType,
		&result.Title,
		&result.Year,
		&result.Available,
		&result.Tags,
	)

	return result, err
}

func (repo queryRepository) GetBook(ctx context.Context, bookID int32) (GetBook, error) {
	rows, err := repo.db.Query(ctx, getBookStmt, bookID)
	if err != nil {
		var result GetBook

		return result, err
	}

	return CollectExactlyOneRow(rows, ScanGetBook)
}

const updateBookStmt = `UPDATE books
SET title = $1, tags = $2
WHERE book_id = $3`

type UpdateBookParams struct {
	Title  string   `db:"title"`
	Tags   []string `db:"tags"`
	BookID int32    `db:"book_id"`
}

func (repo queryRepository) UpdateBook(ctx context.Context, params UpdateBookParams) error {
	_, err := repo.db.Exec(ctx, updateBookStmt,
		params.Title,
		params.Tags,
		params.BookID,
	)

	return err
}

const updateBookIsbnStmt = `UPDATE books
SET title = $1, tags = $2, isbn = $4
WHERE book_id = $3`

type UpdateBookIsbnParams struct {
	Title  string   `db:"title"`
	Tags   []string `db:"tags"`
	BookID int32    `db:"book_id"`
	Isbn   string   `db:"isbn"`
}

func (repo queryRepository) UpdateBookIsbn(ctx context.Context, params UpdateBookIsbnParams) error {
	_, err := repo.db.Exec(ctx, updateBookIsbnStmt,
		params.Title,
		params.Tags,
		params.BookID,
		params.Isbn,
	)

	return err
}
